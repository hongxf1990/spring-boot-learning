<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!-- 这里的配置解决tomcat中运行时控制台输出乱码问题，如果采用main函数运行则放开下面注释注释到root标签（包括） -->
    <!--<include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <include resource="org/springframework/boot/logging/logback/file-appender.xml" />

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>GBK</charset>
        </encoder>
    </appender>

    <root level="INFO">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="FILE" />
    </root>-->

    <include resource="org/springframework/boot/logging/logback/base.xml" />
    <logger name="org.springframework.web" level="INFO"/>

    <!-- 开发环境 + 测试环境. 多个使用逗号隔开. -->
    <springProfile name="dev,test">
        <logger name="org.springframework.web" level="INFO"/>
        <logger name="com.petter.web" level="INFO" />
        <logger name="com.petter.mapper" level="DEBUG" />
    </springProfile>

    <!-- 生产环境. -->
    <springProfile name="prod">
        <logger name="org.springframework.web" level="ERROR"/>
        <logger name="com.petter" level="ERROR" />
    </springProfile>

    <!-- 以下配置spring boot已经全部配置完毕 可查看org/springframework/boot/logging/logback下的配置文件
        只需要在application.properties文件中配置
        logging.file=./springboot.log
        默认级别是info，要改级别的话还要在appliacation.properties里增加一行
        logging.level.org.springframework.web=INFO
        根据不同环境（prod:生产环境，test:测试环境，dev:开发环境）来定义不同的日志输出，
        在 logback-spring.xml 中使用 springProfile 节点来定义
    -->
    <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
    <!--<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-21thread] [%-5level] [%-36.36logger{36}:%-4.4line] - %msg%n</pattern>
            &lt;!&ndash;<charset>GBK</charset>&ndash;&gt;&lt;!&ndash; 此处设置字符集 &ndash;&gt;
        </encoder>
    </appender>

    <appender name="base-log"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>log/petter.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        &lt;!&ndash;日志文件最大的大小&ndash;&gt;
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <maxFileSize>20MB</maxFileSize>
        </triggeringPolicy>
        <encoder>
            &lt;!&ndash;格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符&ndash;&gt;
            <pattern>
                [%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-21thread] [%-5level] [%-36.36logger{36}:%-4.4line] - %msg%n
            </pattern>
            &lt;!&ndash;<charset>GBK</charset> &ndash;&gt;&lt;!&ndash; 此处设置字符集 &ndash;&gt;
        </encoder>
    </appender>

    <root level="INFO">
        <appender-ref ref="STDOUT" />
    </root>
    <logger name="com.petter" level="INFO">
        <appender-ref ref="base-log" />
    </logger>
    <logger name="com.petter.mapper" level="DEBUG">
        <appender-ref ref="base-log" />
    </logger>-->
</configuration>